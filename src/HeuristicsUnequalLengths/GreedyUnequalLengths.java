package HeuristicsUnequalLengths;


import java.util.Arrays;

/**
 * Compute GreedyUnequalLengths Algorithm for two time series of different length
 */
public class GreedyUnequalLengths {

    final double[] X;
    final double[] Y;
    final double c;
    final int m;
    final int n;
    //determine which time series is the longest.
    final int min;
    final int max;
    final int diff;
    final double[] shortTs;
    final double[] longTs;

    public GreedyUnequalLengths(double[] x, double[] y, double c) {
        X = x;
        Y = y;
        this.c = c;
        this.m = x.length;
        this.n = Y.length;
        if (this.m > this.n) {
            this.max = this.m;
            this.min = this.n;
            this.shortTs = y;
            this.longTs = x;
        } else {
            this.max = this.n;
            this.min = this.m;
            this.shortTs = x;
            this.longTs = y;
        }
        this.diff = max - min;

    }

    /**
     * Compute the greedy heuristic backwards to update the upper bound in the pruned MSM Version
     *
     * @return array of intermediate upper bounds
     */
    public double[] computeGreedyArrayUnequalLengths() {
        double[] greedyArray = new double[this.max + 1];

        // compute upper Bounds for every diagonal entry
        // the upper bound is computed from right to left: Possibility to update the upper Bound when a diagonal entry is computed
        // upper Bound for the last entry is 0, because there is nothing left to compute
        greedyArray[max] = 0.;

        // assume that the time series are aligned at the end
        double distCurrent = Math.abs(X[m - 1] - Y[n - 1]);
        double distTmp = distCurrent;
        double shortCurrent;
        double longCurrent;
        double shortTmp = this.shortTs[min - 1];
        double longTmp = this.longTs[max - 1];
        int rel = (shortTmp > longTmp) ? 1 : 2;


        greedyArray[max - 1] = distCurrent;

// first loop for suitable alignment
        for (int i = 2; i <= this.max - this.diff; i++) {
            shortCurrent = this.shortTs[this.min - i];
            longCurrent = this.longTs[this.max - i];
            distCurrent = shortCurrent - longCurrent;

            if ((rel == 1) && distCurrent > 0) {
                if (distCurrent > 2 * c && distTmp > 2 * c) {
                    greedyArray[this.max - i] = 2 * c + Math.abs(shortCurrent - shortTmp) + Math.abs(longCurrent - longTmp) + greedyArray[this.max - i + 1];
                } else {
                    greedyArray[this.max - i] = distCurrent + greedyArray[this.max - i + 1];
                }
            } else if ((rel == 1) && distCurrent <= 0) {
                greedyArray[this.max - i] = -1 * distCurrent + greedyArray[this.max - i + 1];
                rel = 2;
            } else if ((rel == 2) && distCurrent <= 0) {
                if (Math.abs(distCurrent) > 2 * c && Math.abs(distTmp) > 2 * c) {
                    greedyArray[this.max - i] = 2 * c + Math.abs(shortCurrent - shortTmp) + Math.abs(longCurrent - longTmp) + greedyArray[this.max - i + 1];
                } else {
                    greedyArray[this.max - i] = -1 * distCurrent + greedyArray[this.max - i + 1];
                }
            } else {
                greedyArray[this.max - i] = distCurrent + greedyArray[this.max - i + 1];
                rel = 1;
            }

            distTmp = distCurrent;
            shortTmp = shortCurrent;
            longTmp = longCurrent;
        }

        shortCurrent = this.shortTs[0];
        //Aligning the rest of the longer time series to the shorter on
        //Cost for merges and moves to the last point in the shorter TS
        for (int i = max - diff + 1; i <= max; i++) {
            longCurrent = this.longTs[max - i];

            distCurrent = shortCurrent - longCurrent;

            //the algorithm changes in that way, that the 2c intervals changes to a c interval since no split needs to be done
            // for move operations also c has to be added
            if ((rel == 1) && distCurrent > 0) {
                if (distCurrent > c && distTmp > c) {
                    greedyArray[this.max - i] = c + Math.abs(shortCurrent - shortTmp) + Math.abs(longCurrent - longTmp) + greedyArray[this.max - i + 1];
                } else {
                    greedyArray[this.max - i] = c + distCurrent + greedyArray[this.max - i + 1];
                }
            } else if ((rel == 1) && distCurrent <= 0) {
                greedyArray[this.max - i] = -1 * distCurrent + c + greedyArray[this.max - i + 1];
                rel = 2;
            } else if ((rel == 2) && distCurrent <= 0) {
                if (Math.abs(distCurrent) > c && Math.abs(distTmp) > c) {
                    greedyArray[this.max - i] = c + Math.abs(shortCurrent - shortTmp) + Math.abs(longCurrent - longTmp) + greedyArray[this.max - i + 1];
                } else {
                    greedyArray[this.max - i] = -1 * distCurrent + c + greedyArray[this.max - i + 1];
                }
            } else {
                greedyArray[this.max - i] = distCurrent + c + greedyArray[this.max - i + 1];
                rel = 1;
            }

            distTmp = distCurrent;
            shortTmp = shortCurrent;
            longTmp = longCurrent;
        }

        return greedyArray;
    }

    public double upperBoundOnlyMove() {
        double upperBound = 0;
        int n = Y.length;
        int m = X.length;

        if (n >= m) {

            for (int i = 0; i < m; i++) {
                upperBound += Math.abs(X[i] - Y[i]);

            }
            for (int i = m; i < n; i++) {
                upperBound += Math.abs(X[m - 1] - Y[i]) + this.c;

            }
        } else {

            for (int i = 0; i < n; i++) {
                upperBound += Math.abs(X[i] - Y[i]);

            }
            for (int i = n; i < m; i++) {
                upperBound += Math.abs(X[i] - Y[n - 1]) + this.c;

            }

        }

        return upperBound;
    }

    public static void main(String[] args) {
        double[] ts1 = new double[]{14423.0, 14423.0, 14422.0, 14422.0, 14421.0, 14421.0, 14420.0, 14420.0, 14419.0, 14419.0, 14418.0, 14418.0, 14417.0, 14417.0, 14416.0, 14416.0, 14415.0, 14415.0, 14414.0, 14414.0, 14413.0, 14413.0, 14412.0, 14412.0, 14411.0, 14411.0, 14410.0, 14410.0, 14409.0, 14409.0, 14408.0, 14408.0, 14407.0, 14407.0, 14406.0, 14406.0, 14405.0, 14405.0, 14404.0, 14404.0, 14403.0, 14403.0, 14402.0, 14402.0, 14401.0, 14401.0, 14400.0, 14400.0, 14399.0, 14399.0, 14398.0, 14398.0, 14397.0, 14396.0, 14396.0, 14395.0, 14397.0, 14395.0, 14394.0, 14394.0, 14393.0, 14393.0, 14392.0, 14392.0, 14391.0, 14391.0, 14390.0, 14390.0, 14389.0, 14389.0, 14388.0, 14388.0, 14387.0, 14387.0, 14386.0, 14386.0, 14385.0, 14385.0, 14384.0, 14384.0, 14383.0, 14383.0, 14382.0, 14382.0, 14381.0, 14381.0, 14380.0, 14380.0, 14379.0, 14379.0, 14378.0, 14378.0, 14377.0, 14377.0, 14376.0, 14376.0, 14375.0, 14375.0, 14374.0, 14374.0, 14373.0, 14373.0, 14372.0, 14372.0, 14371.0, 14371.0, 14370.0, 14370.0, 14369.0, 14369.0, 14368.0, 14368.0, 14367.0, 14367.0, 14366.0, 14366.0, 14365.0, 14365.0, 14364.0, 14364.0, 14363.0, 14363.0, 14362.0, 14362.0, 14361.0, 14361.0, 14360.0, 14360.0, 14359.0, 14359.0, 14358.0, 14358.0, 14357.0, 14357.0, 14356.0, 14356.0, 14355.0, 14355.0, 14354.0, 14354.0, 14353.0, 14353.0, 14352.0, 14352.0, 14351.0, 14351.0, 14350.0, 14350.0, 14349.0, 14349.0, 14348.0, 14348.0, 14347.0, 14347.0, 14346.0, 14346.0, 14345.0, 14345.0, 14344.0, 14344.0, 14343.0, 14343.0, 14342.0, 14342.0, 14341.0, 14341.0, 14340.0, 14340.0, 14339.0, 14339.0, 14338.0, 14338.0, 14337.0, 14337.0, 14336.0, 14336.0, 14335.0, 14335.0, 14334.0, 14334.0, 14333.0, 14333.0, 14332.0, 14332.0, 14331.0, 14331.0, 14330.0, 14330.0, 14329.0, 14329.0, 14328.0, 14328.0, 14327.0, 14327.0, 14326.0, 14326.0, 14325.0, 14325.0, 14324.0, 14324.0, 14323.0, 14323.0, 14322.0, 14322.0, 14321.0, 14320.0, 14320.0, 14319.0, 14319.0, 14318.0, 14318.0, 14317.0, 14317.0, 14316.0, 14316.0, 14315.0, 14315.0, 14314.0, 14314.0, 14313.0, 14313.0, 14312.0, 14312.0, 14311.0, 14311.0, 14310.0, 14310.0, 14309.0, 14309.0, 14308.0, 14308.0, 14307.0, 14307.0, 14306.0, 14306.0, 14305.0, 14305.0, 14304.0, 14304.0, 14303.0, 14303.0, 14302.0, 14302.0, 14301.0, 14301.0, 14300.0, 14300.0, 14299.0, 14299.0, 14298.0, 14298.0, 14297.0, 14297.0, 14296.0, 14296.0, 14295.0, 14295.0, 14294.0, 14294.0, 14293.0, 14293.0, 14292.0, 14292.0, 14291.0, 14291.0, 14290.0, 14290.0, 14289.0, 14289.0, 14288.0, 14288.0, 14287.0, 14287.0, 14286.0, 14286.0, 14285.0, 14285.0, 14284.0, 14284.0, 14283.0, 14283.0, 14282.0, 14282.0, 14281.0, 14281.0, 14280.0, 14280.0, 14279.0, 14279.0, 14278.0, 14278.0, 14277.0, 14277.0, 14276.0, 14276.0, 14275.0, 14275.0, 14274.0, 14274.0, 14273.0, 14273.0, 14272.0, 14272.0, 14271.0, 14271.0, 14270.0, 14270.0, 14269.0, 14269.0, 14268.0, 14268.0, 14267.0, 14267.0, 14266.0, 14266.0, 14265.0, 14265.0, 14264.0, 14264.0, 14263.0, 14263.0, 14262.0, 14262.0, 14261.0, 14261.0, 14260.0, 14260.0, 14259.0, 14259.0, 14258.0, 14258.0, 14257.0, 14257.0, 14256.0, 14256.0, 14255.0, 14255.0, 14254.0, 14254.0, 14253.0, 14253.0, 14252.0, 14252.0, 14251.0, 14251.0, 14250.0, 14250.0, 14249.0, 14249.0, 14248.0, 14248.0, 14247.0, 14247.0, 14246.0, 14246.0, 14245.0, 14245.0, 14244.0, 14244.0, 14243.0, 14243.0, 14242.0, 14242.0, 14241.0, 14241.0, 14240.0, 14240.0, 14239.0, 14239.0, 14238.0, 14238.0, 14237.0, 14237.0, 14236.0, 14236.0, 14235.0, 14235.0, 14234.0, 14234.0, 14233.0, 14233.0, 14232.0, 14232.0, 14231.0, 14231.0, 14230.0, 14230.0, 14229.0, 14229.0, 14228.0, 14228.0, 14227.0, 14227.0, 14226.0, 14226.0, 14225.0, 14225.0, 14224.0, 14224.0, 14223.0, 14223.0, 14222.0, 14222.0, 14221.0, 14221.0, 14220.0, 14220.0, 14219.0, 14219.0, 14218.0, 14218.0, 14217.0, 14217.0, 14216.0, 14216.0, 14215.0, 14215.0, 14214.0, 14214.0, 14213.0, 14213.0, 14212.0, 14212.0, 14211.0, 14211.0, 14210.0, 14210.0, 14209.0, 14209.0, 14208.0, 14208.0, 14208.0, 14208.0, 14208.0, 14208.0, 14208.0, 14208.0, 14209.0, 14210.0, 14211.0, 14212.0, 14213.0, 14214.0, 14214.0, 14215.0, 14215.0, 14216.0, 14216.0, 14217.0, 14217.0, 14218.0, 14218.0, 14218.0, 14219.0, 14219.0, 14220.0, 14220.0, 14221.0, 14222.0, 14222.0, 14223.0, 14224.0, 14224.0, 14225.0, 14225.0, 14226.0, 14226.0, 14227.0, 14227.0, 14227.0, 14228.0, 14228.0, 14228.0, 14229.0, 14229.0, 14229.0, 14230.0, 14231.0, 14231.0, 14232.0, 14232.0, 14233.0, 14234.0, 14234.0, 14234.0, 14235.0, 14235.0, 14236.0, 14236.0, 14237.0, 14237.0, 14238.0, 14238.0, 14239.0, 14239.0, 14240.0, 14240.0, 14241.0, 14241.0, 14242.0};
        double[] ts2 = new double[]{14243.0, 14244.0, 14244.0, 14244.0, 14245.0, 14245.0, 14246.0, 14246.0, 14247.0, 14247.0, 14248.0, 14248.0, 14248.0, 14249.0, 14249.0, 14250.0, 14250.0, 14251.0, 14251.0, 14252.0, 14252.0, 14252.0, 14253.0, 14253.0, 14254.0, 14254.0, 14255.0, 14255.0, 14256.0, 14256.0, 14257.0, 14257.0, 14257.0, 14258.0, 14258.0, 14259.0, 14259.0, 14260.0, 14260.0, 14261.0, 14261.0, 14261.0, 14262.0, 14262.0, 14263.0, 14263.0, 14264.0, 14264.0, 14265.0, 14265.0, 14266.0, 14266.0, 14266.0, 14267.0, 14267.0, 14268.0, 14268.0, 14269.0, 14269.0, 14270.0, 14270.0, 14270.0, 14271.0, 14271.0, 14272.0, 14272.0, 14273.0, 14273.0, 14274.0, 14274.0, 14274.0, 14275.0, 14275.0, 14276.0, 14276.0, 14277.0, 14277.0, 14278.0, 14278.0, 14279.0, 14279.0, 14279.0, 14280.0, 14280.0, 14281.0, 14281.0, 14282.0, 14282.0, 14283.0, 14283.0, 14283.0, 14284.0, 14284.0, 14285.0, 14285.0, 14286.0, 14286.0, 14287.0, 14287.0, 14288.0, 14288.0, 14288.0, 14289.0, 14289.0, 14290.0, 14290.0, 14291.0, 14291.0, 14292.0, 14292.0, 14292.0, 14293.0, 14293.0, 14294.0, 14294.0, 14295.0, 14295.0, 14296.0, 14296.0, 14296.0, 14297.0, 14297.0, 14298.0, 14298.0, 14299.0, 14299.0, 14300.0, 14300.0, 14301.0, 14301.0, 14301.0, 14302.0, 14302.0, 14303.0, 14303.0, 14304.0, 14304.0, 14305.0, 14305.0, 14305.0, 14306.0, 14306.0, 14307.0, 14307.0, 14308.0, 14308.0, 14309.0, 14309.0, 14310.0, 14310.0, 14310.0, 14311.0, 14311.0, 14312.0, 14312.0, 14313.0, 14313.0, 14314.0, 14314.0, 14314.0, 14315.0, 14315.0, 14316.0, 14316.0, 14317.0, 14317.0, 14318.0, 14318.0, 14318.0, 14319.0, 14319.0, 14320.0, 14320.0, 14321.0, 14321.0, 14322.0, 14322.0, 14323.0, 14323.0, 14323.0, 14324.0, 14324.0, 14325.0, 14325.0, 14326.0, 14326.0, 14327.0, 14327.0, 14327.0, 14328.0, 14328.0, 14329.0, 14329.0, 14330.0, 14330.0, 14331.0, 14331.0, 14332.0, 14332.0, 14332.0, 14333.0, 14333.0, 14334.0, 14334.0, 14335.0, 14335.0, 14336.0, 14336.0, 14336.0, 14337.0, 14337.0, 14338.0, 14338.0, 14339.0, 14339.0, 14340.0, 14340.0, 14341.0, 14341.0, 14341.0, 14342.0, 14342.0, 14343.0, 14343.0, 14344.0, 14344.0, 14345.0, 14345.0, 14345.0, 14346.0, 14346.0, 14347.0, 14347.0, 14348.0, 14348.0, 14349.0, 14349.0, 14349.0, 14350.0, 14350.0, 14351.0, 14351.0, 14352.0, 14352.0, 14353.0, 14353.0, 14354.0, 14354.0, 14354.0, 14355.0, 14355.0, 14356.0, 14356.0, 14357.0, 14357.0, 14358.0, 14358.0, 14358.0, 14359.0, 14359.0, 14360.0, 14360.0, 14361.0, 14361.0, 14362.0, 14362.0, 14363.0, 14363.0, 14363.0, 14364.0, 14364.0, 14365.0, 14365.0, 14366.0, 14366.0, 14367.0, 14367.0, 14367.0, 14368.0, 14368.0, 14369.0, 14369.0, 14370.0, 14370.0, 14371.0, 14371.0, 14371.0, 14372.0, 14372.0, 14373.0, 14373.0, 14374.0, 14374.0, 14375.0, 14375.0, 14376.0, 14376.0, 14376.0, 14377.0, 14377.0, 14378.0, 14378.0, 14379.0, 14379.0, 14380.0, 14380.0, 14380.0, 14381.0, 14381.0, 14382.0, 14382.0, 14383.0, 14383.0, 14384.0, 14384.0, 14385.0, 14385.0, 14385.0, 14386.0, 14386.0, 14387.0, 14387.0, 14388.0, 14388.0, 14389.0, 14389.0, 14389.0, 14390.0, 14390.0, 14391.0, 14391.0, 14392.0, 14392.0, 14393.0, 14393.0, 14393.0, 14394.0, 14394.0, 14395.0, 14395.0, 14396.0, 14396.0, 14397.0, 14397.0, 14398.0, 14398.0, 14398.0, 14399.0, 14399.0, 14400.0, 14400.0, 14401.0, 14401.0, 14402.0, 14402.0, 14402.0, 14403.0, 14403.0, 14404.0, 14404.0, 14405.0, 14405.0, 14406.0, 14406.0, 14407.0, 14407.0, 14407.0, 14408.0, 14408.0, 14409.0, 14409.0, 14410.0, 14410.0, 14411.0, 14411.0, 14411.0, 14412.0, 14412.0, 14413.0, 14413.0, 14414.0, 14414.0, 14415.0, 14415.0, 14415.0, 14416.0, 14416.0, 14417.0, 14417.0, 14418.0, 14418.0, 14419.0, 14419.0, 14420.0, 14420.0, 14420.0, 14421.0, 14421.0, 14422.0, 14422.0, 14423.0, 14423.0, 14424.0, 14424.0, 14424.0, 14425.0, 14425.0, 14426.0, 14426.0, 14427.0, 14427.0, 14428.0, 14428.0, 14429.0, 14429.0, 14429.0, 14430.0, 14430.0, 14431.0, 14431.0, 14432.0, 14432.0, 14433.0, 14433.0, 14433.0, 14434.0, 14434.0, 14435.0, 14435.0, 14436.0, 14436.0, 14436.0, 14436.0, 14436.0, 14436.0, 14436.0, 14436.0, 14443.0, 14452.0, 14460.0, 14469.0, 14478.0, 14486.0, 14488.0, 14481.0, 14474.0, 14468.0, 14461.0, 14454.0, 14447.0, 14438.0, 14429.0, 14421.0, 14412.0, 14403.0, 14394.0, 14398.0, 14410.0, 14422.0, 14434.0, 14446.0, 14458.0, 14464.0, 14449.0, 14435.0, 14421.0, 14406.0, 14392.0, 14378.0, 14385.0, 14398.0, 14410.0, 14422.0, 14435.0, 14447.0, 14451.0, 14444.0, 14437.0, 14429.0, 14422.0, 14415.0, 14408.0, 14403.0, 14399.0, 14394.0, 14390.0, 14385.0, 14381.0, 14385.0, 14395.0, 14404.0, 14414.0, 14424.0, 14433.0, 14439.0, 14428.0, 14418.0, 14407.0, 14397.0, 14386.0};


    }
}
